GITHUB
•	گیت ابزاریست برای کنترل ورژن برنامه
•	با دستور git  به تمام دستورات دسترسی پیدا میکنیم
•	برای شروع باید از دستور git init  یک repository ایجاد کنیم 
•	برای دیدن مراحل کار از دستور git status  استفاده میشود
•	برای اضافه کردن فایل به داخل stage  از دستور git add . استفاده میشود
•	با دستور git commit –m “ text” فایا ها یا تغیرات را به داخل  repository وارد میکنیم
•	با دستورgit commit –a –m “text”  دو دستور add  و commit  را همزمان انجام میدهیم
•	با دستور git rm --cached filename یک فایل را حذف میکنیم 
•	با دستور git rm --cached -r   تمام فایلها را حذف میکنیم 
•	با دستور git diff  تغییرات را مشاهده میکنیم
•	با دستور git log  میتوانیم commit  ها را مشاهده کنیم
•	با دستور  git log -n git –onelineمیتوانیم commit  ها را به صورت تک خطی ببینیم
•	برای برگرداندن تغییرات قبل از commit  کردن از دستور 
git checkout -- fileName   یا git checkout -- .  استفاده میشود
•	همچنین میتوانیم از دستور git reset HEAD .  نیز استفاده کنیم ولی بعدش باید از دستور git checkout -- fileName   یا git checkout -- . دوباره استفاده شود 
•	برای برگشتن به یک commit  مورد نظر از دستور git reset commitId  استفاده میشود
•	اگر بخواهیم هنگام برگشت به commit  مورد نظر اگر فایلی هم ایجاد کرده بودیم پاک شود از دستور git reset –hard commitId  استفاده میکنیم 
•	در گیت شاخه اصلی ما main یا  masterهستش برای ایجاد شاخه های مختلف از دستور branch  استفاده میشود   git branch Nameیا از دستورgit checkout –b name استفاده میشود 
•	برای نمایش  branch ها از دستور git branch _a  استفاده می‌شود 
•	برای حذف یک branch  از دستور git branch –d name  استفاده می‌شود 
•	برای سویچ کردن به branch مورد نظر از دستور git checkout name  استفاده میشود .
•	برای ترکیب کردن branch  مورد نظر به branch   اصلی اول وارد branch  اصلی میشویم و بعد از دستور git merge name  استفاد‌ه میکنیم
•	برای دیدن شاخه ها به صورت گرافیکی از دستور git log –graph  استفاده میکنیم
•	زمانی که داخل یک branch  هستیم و تغیراتی ایجاد کردیم و میخواهیم به یک  branch  دیگری برویم ولی نمیخواهیم تغیرات با ما به branch  جدید بیاید اول تغیرات را به branch add  میکنیم و بعد  از دستور  git stash save  “message”  استفاده میکنیم 
•	با دستور  git stash list  میتوانیم لیست  stash  های ایجاد شده را ببینیم 
•	با دستور git stash drop name  میتوانیم stash  مورد نظر را حذف کنیم
•	با دستور  git stash show name  تغییرات داخل stash  مورد نظر را نمایش میدهد 
•	با دستور  git stash show -p name  تغییرات داخل stash  مورد نظر را  با جزعیات نمایش میدهد

•	با دستور  git stash pop nameفایل ذخیره شده در stash  را بیرون میکشیم واز stash هم پاک میشود 

•	با دستور  git stash apply name فایل ذخیره شده در stash  را بیرون میکشیم ولی از stash  پاک نمیشود و باید با drop  پاکش کنیم

•	برای اینکه به git  بفهمانیم که فایلی یا فولدری  را دنبال نکند یا تغییراتش تاثیری نداشته باشد باید از .gitignor  استفاده کنیم . برای ایجاد این فایل از دستور touch .gitignor استفاده میکنیم
•	بعد از ایجاد فایل .gitignor  برای اینکه مشخص کنیم فایلی یا فولدری را دنبال نکند اول وارد فایل .gitignor  شده و نام فایل یا فولدر را در آنجا وارد میکنیم به صورت زیر:

برای فولدر  :        / نام فولدر 
برای فایل   :           پسوند . نام فایل یا *
اگر * گذاشتیم و پسوند را وارد کردیم (*.txt) یعنی تمام فایل ها با پسوند txt  نادیده گرفته شوند 
اگر بخواهیم فایلی را مجزا کنیم و دنبال شود به این صورت مینویسیم (!a.txt)
اگر فایلی از قبل دنبال میشد وحالا میخواهیم آن را دنبال نکنیم با وجود اینکه داخل .gitignor  هم ثبت کردیم ولی باز هم نمایش داده میشود از git rm --cached –r .   استفاده میکنیم

•	برای ثبت کردن user name  و email  برای git  به صورت زیر عمل میکنیم 
Git config –global user.name “ user name”
Git config –global user.email “email” 

•	برای وارد کردن پروژه به داخل github  بعد از ایجاد repository  در github  با دستور
git remote add origin   و بعد با دستور 
git push –u origin main  پروژه به داخل github  آپلود میشود 
•	با دستور git pull  آخرین تغییرات را از سایت میگیریم 
•	برای گرفتن پروژه از github روی یک کامپیوتر دیگر یا باید فایل zip  را دانلود کنیم ویا از دستور git clone url folderName استفاده کنیم 
